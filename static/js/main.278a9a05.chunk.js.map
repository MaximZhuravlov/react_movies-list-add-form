{"version":3,"sources":["components/MovieCard/MovieCard.jsx","components/MoviesList/MoviesList.jsx","components/NewMovie/NewMovie.jsx","App.jsx","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","imdbId","NewMovie","state","isTitleEmpty","isImgUrlValid","isImdbUrlValid","isImdbIdValid","handleChange","event","target","name","value","setState","submitForm","preventDefault","onAdd","props","isValidated","regexp","trim","test","Number","isNaN","this","method","onSubmit","htmlFor","type","id","onChange","autoComplete","Component","App","moviesFromServer","addMovie","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.278a9a05.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MovieCard.scss';\n\nexport const MovieCard = ({ title, description, imgUrl, imdbUrl }) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n\nMovieCard.defaultProps = {\n  description: '',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      imgUrl: PropTypes.string.isRequired,\n      imdbUrl: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nMoviesList.defaultProps = {\n  movies: [],\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './NewMovie.scss';\n\nexport class NewMovie extends Component {\n  state = {\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n    isTitleEmpty: false,\n    isImgUrlValid: true,\n    isImdbUrlValid: true,\n    isImdbIdValid: true,\n  };\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value,\n    });\n\n    if (name === 'title') {\n      this.setState({\n        isTitleEmpty: false,\n      });\n    }\n\n    if (name === 'imgUrl') {\n      this.setState({\n        isImgUrlValid: true,\n      });\n    }\n\n    if (name === 'imdbUrl') {\n      this.setState({\n        isImdbUrlValid: true,\n      });\n    }\n\n    if (name === 'imdbId') {\n      this.setState({\n        isImdbIdValid: true,\n      });\n    }\n  };\n\n  submitForm = (event) => {\n    event.preventDefault();\n\n    const { onAdd } = this.props;\n    const { title, description, imgUrl, imdbUrl } = this.state;\n    let { imdbId } = this.state;\n    let isValidated = true;\n    // eslint-disable-next-line max-len\n    const regexp = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n\n    if (title.trim() === '') {\n      this.setState({\n        isTitleEmpty: true,\n      });\n\n      isValidated = false;\n    }\n\n    if (!regexp.test(imgUrl)) {\n      this.setState({\n        isImgUrlValid: false,\n      });\n\n      isValidated = false;\n    }\n\n    if (!regexp.test(imdbUrl)) {\n      this.setState({\n        isImdbUrlValid: false,\n      });\n\n      isValidated = false;\n    }\n\n    imdbId = Number(imdbId);\n    // eslint-disable-next-line no-restricted-globals\n    if (isNaN(imdbId) || imdbId === 0) {\n      this.setState({\n        isImdbIdValid: false,\n      });\n\n      isValidated = false;\n    }\n\n    if (isValidated) {\n      this.setState({\n        title: '',\n        description: '',\n        imgUrl: '',\n        imdbUrl: '',\n        imdbId: '',\n      });\n\n      onAdd({\n        title,\n        description,\n        imgUrl,\n        imdbUrl,\n        imdbId,\n      });\n    }\n  };\n\n  render() {\n    const {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n      isTitleEmpty,\n      isImgUrlValid,\n      isImdbUrlValid,\n      isImdbIdValid,\n    } = this.state;\n\n    return (\n      <form\n        method=\"post\"\n        onSubmit={this.submitForm}\n        className=\"form\"\n      >\n        <p className=\"form__title\">Add new movie</p>\n        <div className=\"form__field\">\n          <label htmlFor=\"title\">Title: </label>\n          <input\n            type=\"text\"\n            className={isTitleEmpty\n              ? 'form__input form__input--error'\n              : 'form__input'}\n            name=\"title\"\n            id=\"title\"\n            value={title}\n            onChange={this.handleChange}\n            autoComplete=\"off\"\n          />\n          {!isTitleEmpty || (\n            <p className=\"form__field-error\">Please, enter the title</p>\n          )}\n        </div>\n        <div className=\"form__field\">\n          <label htmlFor=\"description\">Description: </label>\n          <input\n            type=\"text\"\n            className=\"form__input\"\n            name=\"description\"\n            id=\"description\"\n            value={description}\n            onChange={this.handleChange}\n            autoComplete=\"off\"\n          />\n        </div>\n        <div className=\"form__field\">\n          <label htmlFor=\"imgUrl\">Image URL: </label>\n          <input\n            type=\"text\"\n            className={isImgUrlValid\n              ? 'form__input'\n              : 'form__input form__input--error'}\n            name=\"imgUrl\"\n            id=\"imgUrl\"\n            value={imgUrl}\n            onChange={this.handleChange}\n            autoComplete=\"off\"\n          />\n          {!isImgUrlValid && (\n            <p className=\"form__field-error\">Please, enter the valid URL</p>\n          )}\n        </div>\n        <div className=\"form__field\">\n          <label htmlFor=\"imdbUrl\">IMDB URL: </label>\n          <input\n            type=\"text\"\n            className={isImdbUrlValid\n              ? 'form__input'\n              : 'form__input form__input--error'}\n            name=\"imdbUrl\"\n            id=\"imdbUrl\"\n            value={imdbUrl}\n            onChange={this.handleChange}\n            autoComplete=\"off\"\n          />\n          {!isImdbUrlValid && (\n            <p className=\"form__field-error\">Please, enter the valid URL</p>\n          )}\n        </div>\n        <div className=\"form__field\">\n          <label htmlFor=\"imdbId\">IMDB ID: </label>\n          <input\n            type=\"text\"\n            className={isImdbIdValid\n              ? 'form__input'\n              : 'form__input form__input--error'}\n            name=\"imdbId\"\n            id=\"imdbId\"\n            value={imdbId}\n            onChange={this.handleChange}\n            autoComplete=\"off\"\n          />\n          {!isImdbIdValid && (\n            <p className=\"form__field-error\">Please, enter the valid ID</p>\n          )}\n        </div>\n        <button type=\"submit\" className=\"form__submit\">\n          Add movie\n        </button>\n      </form>\n    );\n  }\n}\n\nNewMovie.propTypes = {\n  onAdd: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie) => {\n    this.setState(state => ({\n      movies: [...state.movies, movie],\n    }));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie onAdd={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}